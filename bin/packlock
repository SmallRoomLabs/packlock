#!/usr/bin/env node

var semver  = require('semver'),
	fs		= require('fs'),
	program = require('commander'),
	path	= require('path'),
	_		= require('underscore')._,
	Emitter  = require('events').EventEmitter,
	readInstalled = require('read-installed');

var version = "0.0.1"
var events = new Emitter();

program
  .version(version)
  .option('')
  .option('-s, --scanpath [path]', 'Directory to scan for packages. Defaults to current directory', '.')
  .option('-w, --whitelist [path]', 'Location of whitelist. Defaults to current directory', '.')
  .parse(process.argv);

var config = _.pick(program, [ 'scanpath', 'whitelist']);

if (fs.statSync(config.whitelist).isDirectory()) {
	config.whitelist = path.resolve(config.whitelist, 'packlock.json');
}
if (!fs.existsSync(config.whitelist)) {
	console.error('Cannot read ' + config.whitelist);
	process.exit(1);
}
if (!fs.existsSync(config.scanpath)) {
	console.error('Cannot scan non-existent directory: ' + config.scanpath);
	process.exit(1);
}
if (!fs.statSync(config.scanpath).isDirectory()) {
	console.error('Scan path should be a directory');
	process.exit(1);
}

console.log('Reading whitelisted modules from ' + config.whitelist)
fs.readFile(config.whitelist, function(err, data) {
	if (err) {
		console.error('Cannot read whitelist ' + config.whitelist);
		process.exit(1);
	} else {
		events.emit('whitelist-read', JSON.parse(data));
	}
});

var exitcode = 0;
var printed = false;
events.on('bad-found', function(pkginfo, name, error) {
	exitcode = 1;
	if (!printed) {
		console.warn('Module: ' + pkginfo.name + ' ' + pkginfo.version);
		printed = true;
	}
	console.warn(' ' + String.fromCharCode(8627) + ' ' + name + ' ' + pkginfo.dependencies[name].version + ' ' + error);
});


events.on('whitelist-read', function(whitelist) {
	console.log('Reading modules in ' + path.resolve(config.scanpath))
	readInstalled(config.scanpath, {}, function (er, pkginfo) {
		for (var i in pkginfo.dependencies) {
			if (!whitelist[i]) {
				events.emit('bad-found', pkginfo, i, 'not allowed');
				continue;
			}
			if (!semver.satisfies(pkginfo.dependencies[i].version, whitelist[i])) {
				events.emit('bad-found', pkginfo, i, 'is only allowed in version ' + whitelist[i]);
			}
		}
		process.exit(exitcode);
	});
});

